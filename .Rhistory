all_day <- names(c('interval', 'mean_steps'))
all_day <- names(c('interval', 'mean_steps'))
plot(all_day$interval)
all_day$interval
all_day
all_day <- avg_day(activity_data)
all_day <- names(c('interval', 'mean_steps'))
all_day
all_day <- avg_day(activity_data)
names(all_day) <- c('interval', 'mean_steps')
all_day
with(all_day, plot(interval,mean_steps))
with(all_day, plot(interval,mean_steps, type="l"))
with(all_day, plot(interval,mean_steps, type="l"))
with(all_day, plot(interval,mean_steps, type="l"))
with(all_day, plot(interval,mean_steps, type="l"))
names(all_day) <- c('interval', 'mean_steps')
with(all_day, plot(interval,mean_steps, type="l"))
with(all_day, plot(Interval,Mean Steps, type="l"))
with(all_day, plot(interval,mean_steps, xlab="Interval", ylab= "Mean Steps", type="l"))
with(all_day, plot(interval,mean_steps, xlab="Interval", ylab= "Steps", type="l"))
}
avg_day <- function(data){
group_by(data, interval) %>%
summarise(mean(steps,na.rm = TRUE))
}
all_day <- avg_day(activity_data)
names(all_day) <- c('interval', 'mean_steps')
with(all_day, plot(interval,mean_steps, xlab="Interval", ylab= "Steps", type="l"))
with(all_day, plot(interval,mean_steps, xlab="Interval", ylab= "Steps", main="l", type="l"))
type="l"))
with(all_day,
plot(interval,mean_steps,
xlab="Interval", ylab= "Steps",
main="Average Daily Activity Pattern",
type="l"))
max(all_day$mean_steps)
all_day$mean_steps== max(all_day$mean_steps)
all_day[all_day$mean_steps== max(all_day$mean_steps)]
all_day[,all_day$mean_steps== max(all_day$mean_steps)]
all_day[all_day$mean_steps== max(all_day$mean_steps),]
all_day$interval[all_day$mean_steps == max(all_day$mean_steps),]
all_day[all_day$mean_steps == max(all_day$mean_steps),]$interval
max_active <- all_day[all_day$mean_steps ==
max(all_day$mean_steps),]$interval
abline(max_active)
?abline
abline(v = max_active)
?abline
abline(v = max_active,lty=3)
?abline
abline(v = max_active,lty=30,col="blue")
abline(v = max_active,col="blue")
max_active <- all_day[all_day$mean_steps ==
with(all_day,
plot(interval,mean_steps,
xlab="Interval", ylab= "Steps",
main="Average Daily Activity Pattern",
type="l"))
max(all_day$mean_steps),]$interval
max_active <- all_day[all_day$mean_steps ==
max(all_day$mean_steps),]$interval
with(all_day,
plot(interval,mean_steps,
xlab="Interval", ylab= "Steps",
main="Average Daily Activity Pattern",
type="l"))
abline(v = max_active,col="blue")
complete.cases(activity_data)
activity_data[complete.cases(activity_data),]
activity_data[!complete.cases(activity_data),]
length(activity_data[!complete.cases(activity_data),])
length(activity_data[!complete.cases(activity_data),],)
dim(activity_data[!complete.cases(activity_data),])
dim(activity_data[!complete.cases(activity_data),])[1]
?dim
height(activity_data[!complete.cases(activity_data),])[1]
sum(activity_data[!complete.cases(activity_data),])
sum(!complete.cases(activity_data))
?norm
is.na(activity_data)
is.na(activity_data2)
is.na(activity_data2) <- "neat"
activity_data2
head(activity_data2)
is.na(activity_data2$steps) <- "neat"
activity_data2$steps[is.na(activity_data2$steps)] <- "neat"
head(activity_data2)
activity_data$steps[is.na(activity_data$steps)]
activity_data[is.na(activity_data$steps)]
activity_data[is.na(activity_data$steps),]
activity_data[is.na(activity_data$steps),]$date
[activity_data[is.na(activity_data$steps),]$date,]
[activity_data[is.na(activity_data$steps),]$interval,]
activity_data[is.na(activity_data$steps),]$interval
all_day[activity_data[is.na(activity_data$steps),]$interval]
all_day$interval[activity_data[is.na(activity_data$steps),]$interval]
complete.cases(all_day)
all_day$interval[activity_data[is.na(activity_data$steps),]$interval]
activity_data[is.na(activity_data$steps),]$interval
activity_data[is.na(activity_data$steps),]
sum(!complete.cases(activity_data))
all_day$interval[activity_data[is.na(activity_data$steps),]$interval]
length(all_day$interval[activity_data[is.na(activity_data$steps),]$interval])
sum(!complete.cases(activity_data))
sum(is.na(activity_data$steps)
)
?match
activity_data[is.na(activity_data$steps),]
activity_data[is.na(activity_data$steps),]$interval
match(activity_data[is.na(activity_data$steps),]$interval, all_day$interval)
length(match(activity_data[is.na(activity_data$steps),]$interval, all_day$interval))
all_day$steps[match(activity_data[is.na(activity_data$steps),]$interval, all_day$interval)]
all_day
all_day$mean_steps[match(activity_data[is.na(activity_data$steps),]$interval, all_day$interval)]
length(all_day$mean_steps[match(activity_data[is.na(activity_data$steps),]$interval, all_day$interval)])
all_day$mean_steps[activity_data[is.na(activity_data$steps),]$interval,]
activity_data[is.na(activity_data$steps),]$interval
all_day$mean_steps[match(activity_data[is.na(activity_data$steps),]$interval, all_day$interval)]
activity_data2 <- activity_data
all_day$mean_steps[match(activity_data2[is.na(activity_data2$steps),]$interval, all_day$interval)]
activity_data2[is.na(activity_data2$steps),] <- all_day$mean_steps[match(activity_data2[is.na(activity_data2$steps),]$interval, all_day$interval)]
activity_data2[is.na(activity_data2$steps),]
activity_data2[is.na(activity_data2$steps),] <- all_day$mean_steps[match(activity_data2[is.na(activity_data2$steps),]$interval, all_day$interval)]
activity_data2[is.na(activity_data2$steps),]$steps
activity_data2[is.na(activity_data2$steps),]$steps <- all_day$mean_steps[match(activity_data2[is.na(activity_data2$steps),]$interval, all_day$interval)]
activity_data2[is.na(activity_data2$steps),]$steps
activity_data2
activity_data2[is.na(activity_data2$steps),]$steps <- all_day$mean_steps[match(activity_data2[is.na(activity_data2$steps),]$interval, all_day$interval)]
complete.cases(activity_data2)
!complete.cases(activity_data2)
sum(!complete.cases(activity_data2))
activity_data[is.na(activity_data$steps),]$steps <-
all_day$mean_steps[match(activity_data[is.na(activity_data$steps),]$interval, all_day$interval)]
activity_data <- get_read('https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip') %>%
process()
activity_data[is.na(activity_data$steps),]$steps <-
match(activity_data[is.na(activity_data$steps),]$interval, all_day$interval) %>%
all_day$mean_steps[.]
sum(!complete.cases(activity_data))
activity_data <- get_read('https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip') %>%
fg
activity_data <- get_read('https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip') %>%
process()
sum(!complete.cases(activity_data))
sum(is.na(activity_data$steps))
nas <- is.na(activity_data$steps)
sum(nas)
nas
activity_data$nas <-nas
View(activity_data)
View(all_day)
activity_data[is.na(nas),]$steps <-
match(activity_data[nas,]$interval, all_day$interval) %>%
all_day$mean_steps[.]
activity_data[is.na(eval(nas)),]$steps <-
match(activity_data[eval(nas),]$interval, all_day$interval) %>%
all_day$mean_steps[.]
activity_data <- get_read('https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip') %>%
process()
activity_data[is.na(nas),]$steps <-
match(activity_data[nas,]$interval, all_day$interval) %>%
all_day$mean_steps[.]
activity_data[is.na(nas),]$steps
activity_data[nas,]$steps
activity_data[nas,]$steps <-
match(activity_data[nas,]$interval, all_day$interval) %>%
all_day$mean_steps[.]
activity_data$nas <- nas
View(activity_data)
activity_data <- get_read('https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip') %>%
process()
filled <- activity_data
# boolian for if steps are na
nas <- is.na(filled$steps)
# Get number of rows with missing values
sum(nas)
# Replace NA values with the matching interval mean calculated earlier
filled[nas,]$steps <-
match(filled[nas,]$interval, all_day$interval) %>%
all_day$mean_steps[.]
per_day(filled)
names(filled_daily) <- c('date', 'total_steps','mean_steps', 'median_steps')
filled_daily<-per_day(filled)
names(filled_daily) <- c('date', 'total_steps','mean_steps', 'median_steps')
hist(filled$total_steps, xlab= 'Date', ylab = 'Steps')
hist(filled_daily$total_steps, xlab= 'Date', ylab = 'Steps')
hist(filled_daily$total_steps, xlab= 'Date', ylab = 'Steps')
hist(filled_daily$total_steps, xlab= 'Date', ylab = 'Steps', main = "Daily Steps after filling data")
test<- hist(filled_daily$total_steps, xlab= 'Date', ylab = 'Steps', main = "Daily Steps after filling data")
close.screen(
)
dev.off()
test<- hist(filled_daily$total_steps, xlab= 'Date', ylab = 'Steps', main = "Daily Steps after filling data")
test
print(test)
?plot
report_daily <- function(df, column){
df[c('date',column)] %>%
print(.,n=length(df$date))
}
report_daily(daily_steps,'mean_steps')
daily_steps
report_daily <- function(df, column){
df[c('date',column)] %>%
print(.,n=length(daily_steps$date))
}
report_daily(daily_steps,'mean_steps')
report_daily <- function(df, column){
daily_steps[c('date',column)] %>%
print(.,n=length(df$date))
}
report_daily(daily_steps,'mean_steps')
report_daily <- function(df, column){
daily_steps[c('date',column)] %>%
print(.,n=length(daily_steps$date))
}
report_daily('median_steps')
report_daily(daily_steps,'mean_steps')
report_daily <- function(column){
daily_steps[c('date',column)] %>%
print(.,n=length(daily_steps$date))
}
report_daily('median_steps')
report_daily('mean_steps')
get_read <- function(link){
if(!file.exists('activity.zip')){
download.file(link, 'activity.zip', method = 'curl')
}
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
read.csv('activity.csv')
}
process <- function(data){
data$date <- as.Date(data$date)
return(data)
}
activity_data <- get_read('https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip') %>%
process()
```
## What is mean total number of steps taken per day?
```{r message=FALSE}
library (dplyr)
# Create data frame of daily total, mean, and median steps
per_day <- function(data){
group_by(data, date) %>%
summarise(sum(steps,na.rm = TRUE),
mean(steps,na.rm = TRUE),
median(steps,na.rm = TRUE))
}
# Call funtion to build df and set column names
daily_steps <- per_day(activity_data)
names(daily_steps) <- c('date', 'total_steps','mean_steps', 'median_steps')
report_daily <- function(column){
daily_steps[c('date',column)] %>%
print(.,n=length(daily_steps$date))
}
report_daily('mean_steps')
report_daily <- function(df, column){
df[c('date',column)] %>%
print(.,n=length(df$date))
}
report_daily(aily_steps,'mean_steps')
report_daily(daily_steps,'mean_steps')
report_daily(filled_daily,'mean_steps')
report_daily(filled_daily, 'median_steps')
report_daily(daily_steps,'mean_steps') == report_daily(filled_daily,'mean_steps')
report_daily(daily_steps, 'median_steps') == report_daily(filled_daily, 'median_steps')
report_daily <- function(df, column){
df[c('date',column)] %>%
print(.,n=length(df$date))
}
report_daily(daily_steps,'mean_steps') == report_daily(filled_daily,'mean_steps')
report_daily(daily_steps, 'median_steps') == report_daily(filled_daily, 'median_steps')
filled_daily == daily_steps
filled
sum(is.na(filled))
dim(filled)
dim(daily_steps)
dim(activity_data)
dim(filled_daily)
filled <- activity_data
nas <- is.na(filled$steps)
sum(nas)
filled[nas,]$steps <-
match(filled[nas,]$interval, all_day$interval) %>%
all_day$mean_steps[.]
nas <- is.na(filled$steps)
sum(nas)
filled_daily<-per_day(filled)
report_daily(daily_steps,'mean_steps') == report_daily(filled_daily,'mean_steps')
report_daily(daily_steps,'mean_steps') == report_daily(filled_daily,'mean_steps')
report_daily(filled_daily,'mean_steps')
report_daily(filled_daily, 'median_steps')
names(filled_daily) <- c('date', 'total_steps','mean_steps', 'median_steps')
report_daily(filled_daily,'mean_steps')
report_daily(daily_steps,'mean_steps') == report_daily(filled_daily,'mean_steps')
report_daily(daily_steps,'sum_steps') == report_daily(filled_daily,'sum_steps')
report_daily(daily_steps,'total_steps') == report_daily(filled_daily,'total_steps')
report_daily(daily_steps,'total_steps')
report_daily(filled_daily,'total_steps')
weekdays(filled$date)
weekdays(filled$date) == "Sunday"
weekdays(filled$date) == "Sunday" or "Saturday"
weekdays(filled$date) == "Sunday"|"Saturday"
weekdays(filled$date) == ("Sunday" or "Saturday")
weekdays(filled$date) == ("Sunday" | "Saturday")
weekdays(filled$date) == "Sunday" |weekdays(filled$date) == "Saturday"
filled$weekend <- weekdays(filled$date) == "Sunday" | weekdays(filled$date) == "Saturday"
filled$weekend <-
weekdays(filled$date) == "Sunday" |
weekdays(filled$date) == "Saturday"
filled
?qplot
qplot(filled$date,filled$steps)
qplot(filled$date,filled$steps, geom = "line")
avg_day(filled)
?group_by
head(filled)
avg_day_wkend <- function(data){
group_by(data, interval, weekend) %>%
summarise(mean(steps,na.rm = TRUE))
}
weekend <- avg_day_wkend(filled)
weekend
qplot(weekend$date, weekend$steps, geom = "line")
qplot(weekend$date, weekend$steps, geom = "line")
weekend
names(weekend)[3]
names(weekend)[3] <- 'steps'
qplot(weekend$date, weekend$steps, geom = "line")
weekend
qplot(weekend$date, weekend$steps, geom = "line")
weekend <- avg_day_wkend(filled)
names(weekend)[3] <- 'steps'
qplot(weekend$date, weekend$steps, geom = "line")
?qplot
qplot(weekend$interval, weekend$steps, geom = "line")
qplot(weekend$interval, weekend$steps, geom = "line", facet==weekend)
rm(weekend)
wk_wkend <- avg_day_wkend(filled)
names(weekend)[3] <- 'steps'
qplot(weekend$interval, weekend$steps, geom = "line", facet==weekend)
wk_wkend <- avg_day_wkend(filled)
names(wk_wkend)[3] <- 'steps'
qplot(wk_wkend$interval, wk_wkend$steps, geom = "line", facet==weekend)
qplot(wk_wkend$interval, wk_wkend$steps, geom = "line", facets = =weekend)
qplot(wk_wkend$interval, wk_wkend$steps, geom = "line", facets = weekend)
wk_wkend
qplot(wk_wkend$interval, wk_wkend$steps, geom = "line", facets = ~ weekend)
qplot(wk_wkend$interval, wk_wkend$steps, geom = "line", facets = .~ weekend)
filled$weekend <-
weekdays(filled$date) == "Sunday" |
weekdays(filled$date) == "Saturday"
avg_day_wkend <- function(data){
group_by(data, interval, weekend) %>%
summarise(mean(steps,na.rm = TRUE))
}
wk_wkend <- avg_day_wkend(filled)
names(wk_wkend)[3] <- 'steps'
qplot(wk_wkend$interval, wk_wkend$steps, geom = "line", facets = .~ weekend)
qplot(wk_wkend$interval, wk_wkend$steps, geom = "line", facets = .~ wk_wkend$weekend)
qplot(wk_wkend$interval, wk_wkend$steps, geom = "line", facets = .~ wk_wkend$weekend)
wk_wkend
names(wk_wkend)
qplot(wk_wkend$interval, wk_wkend$steps, geom = "line", facets = .~ wk_wkend$weekend)
wk_wkend$weekend
qplot(wk_wkend$interval, wk_wkend$steps, geom = "line", facets = . ~ wk_wkend$weekend)
qplot(wk_wkend$interval, wk_wkend$steps, geom = "line")
qplot(wk_wkend$interval, wk_wkend$steps, geom = "line", facets = wk_wkend$weekend)
wk_wkend$weekend)
wk_wkend$weekend )
qplot(wk_wkend$interval, wk_wkend$steps, geom = "line", facets = wk_wkend$weekend ~ . )
qplot(wk_wkend$interval, wk_wkend$steps, geom = "line", facets = wk_wkend$interval ~ . )
qplot(wk_wkend$weekend, wk_wkend$steps, geom = "line", facets = wk_wkend$interval ~ . )
qplot(wk_wkend$weekend, wk_wkend$interval, geom = "line", facets = wk_wkend$steps ~ . )
qplot(interval, steps, geom = "line", facets = weekend ~ . , data= wk_wkend)
?qplot
levels(wk_wkend)
levels(wk_wkend$weekend)
levels(wk_wkend$name)
levels(wk_wkend$steps)
?levels
class(wk_wkend$weekend)
?labeller
qplot(interval, steps, geom = "line", facets = weekend ~ . , data= wk_wkend, labeller(TRUE="Weekend"))
qplot(interval, steps, geom = "line", facets = weekend ~ . , data= wk_wkend, labeller =labeller(TRUE="Weekend"))
wkend_labels <-c(TRUE = "Weekend",
FALSE = "Weekday")
wkend_labels <-c(TRUE = "Weekend",
qplot(interval, steps, geom = "line", facets = weekend ~ . , data= wk_wkend, labeller = labeller('TRUE'="Weekend"))
filled[filled$weekend]
filled[filled$weekend],
filled[filled$weekend,]
filled$weekend[filled$weekend,]
filled$weekend[filled$weekend]
length(filled$weekend[filled$weekend])
length(filled)
nrow(filled)
filled$wknd[filled$weekend[filled$weekend]]<- "Weekend"
?if
f
if(weekdays(filled$date) == "Sunday" |
weekdays(filled$date) == "Saturday"){
filled$wknd <- "Weekend"
} else {
filled$wknd <- "Weekday"
}
filled
table(filled$wknd)
ifelse(weekdays(filled$date) == "Sunday" |
weekdays(filled$date) == "Saturday"), "Weekend", "Weekday")
weekdays(filled$date) == "Saturday", "Weekend", "Weekday")
?ifelse
ifelse(weekdays(filled$date) == "Sunday", "Weekend", "Weekday")
ifelse(filled$weekend, "Weekend", "Weekday")
filled$wkdy_label <- ifelse(filled$weekend, "Weekend", "Weekday")
table(filled$wkdy_label)
qplot(interval, steps, geom = "line", facets = wkdy_label ~ . , data= wk_wkend)
qplot(interval, steps, geom = "line", facets = wkdy_label ~ . , data= wk_wkend)
avg_day_wkend <- function(data){
group_by(data, interval, wkdy_label) %>%
summarise(mean(steps,na.rm = TRUE))
}
wk_wkend <- avg_day_wkend(filled)
names(wk_wkend)[3] <- 'steps'
qplot(interval, steps, geom = "line", facets = wkdy_label ~ . , data= wk_wkend)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
temo
temp
sum(x^2)
sum((x^2)*p)-sum((x*p)^2)
sum(x^2*p)-sum((x*p)^2)
sum(x^2*p)-sum((x*p))^2
?choose
for (n in 0:10) print(choose(n, k = 0:n))
for (n in 0:10) print(choose(n, k = 0:n))
choose(7,8)
choose(8,7)
choose(8,8)
choose(8,8)
choose(8,5)
choose(8,6)
choose(8,1)
choose(8,2)
?pbinome
?pbinom
pbinom(6,8,.5,lower.tail = FALSE)
pbinom(6,8,.5)
round(pnorm(93, mean = 100, sd = 10) * 100)
?pbimon
round(pnorm(95, mean = 100, sd = 10) * 100)
pnorm(95, mean = 100, sd = 10)
?qnorm
qnorm(95, mean = 100, sd = 10)
qnorm(.95, mean = 100, sd = 10)
qnorm(.05, mean = 100, sd = 10)
rnorm(50,100,10)
qnorm(.95)
qnorm(.95, mean=100, sd =10/sqrt(50))
pbinom(4,size=6, prob=.5,lower.tail = FALSE)
?pbinom
binom.test(50,100)
If we were to sample 100 draws from a a uniform distribution (which has mean 0.5, and variance 1/12) and take their mean, Xˉ
What is the approximate probability of getting as large as 0.51 or larger expressed to 3 decimal places?
?pnorm
pnorm(.51, .5, (sqrt(1/12)/10), lower.tail = False )
pnorm(.51, .5, (sqrt(1/12)/10), lower.tail = FALSE )
mean((1 : 6 - 3.5)^2 / 10)
?poisson
?\rpois
?rpois
ppois(20, lambda = 2*16.5)
ppois(20, lambda = 2*16.5, lower.tail = FALSE)
qnorm(95, mean = 100, sd = 10)
qnorm(.95, mean = 100, sd = 10)
?qnorm
pnorm(70, mean = 80, sd = 10)
qnorm(.95, mean = 1100, sd = 75)
?rpois
?pbinom
qnorm(.95, mean = 1100, sd = (75^2/100))
75^2
/100
5625/100
qnorm(.95, mean = 1100, sd = 56.25)
qnorm(.95, mean = 1100, sd = (75/100))
qnorm(.95, mean = 1100, sd = sqrt(75/100))
qnorm(.95, mean = 1100, sd = sqrt(75^2/100))
?pbinom()
x
p
x*y
x*p
sum(x*p)
sum(x*p)/4
.5/.5
.4/.6
6/4
.6/.4
?pbinom()
pbinom(3, 5,.5, lower.tail = FALSE)
?pnorm()
ppois(10,lambda = 5*3)
rm(list=ls())
get_wd()
getwd()
